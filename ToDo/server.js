const express=require('express');const path=require('path');const mysql=require('mysql');const bodyParser=require('body-parser');const app=express();const PORT=process.env.PORT||4000;app.set('view engine','ejs');app.set('views',path.join(__dirname,'public','html'));app.use(bodyParser.urlencoded({extended:true}));app.use(bodyParser.json());const db=mysql.createConnection({host:'localhost',user:'root',password:'',database:'todoList',});db.connect((err)=>{if(err){console.error('MySQL connection failed:',err);}else{console.log('Connected to MySQL database');}});app.use(express.static(path.join(__dirname,'public')));app.get('/',(req,res)=>{const query='SELECT id_task, task_name, task_state, task_content FROM tasks';db.query(query,(err,results)=>{if(err){console.error('MySQL query error:',err);res.status(500).send('Internal Server Error');}else{console.log('MySQL query results:',results);res.render('todo',{tasks:results,});}});});app.get('/todo',(req,res)=>{const query='SELECT id_task, task_name, task_state, task_content FROM tasks';db.query(query,(err,results)=>{if(err){console.error('MySQL query error:',err);res.status(500).send('Internal Server Error');}else{console.log('MySQL query results:',results);res.render('todo',{tasks:results,});}});});app.get('/getTasks',(req,res)=>{const getTasksQuery='SELECT * FROM tasks';db.query(getTasksQuery,(err,tasks)=>{if(err){console.error('MySQL query error:',err);res.status(500).send('Internal Server Error');}else{console.error('updated tasks');res.render('todo',{tasks});}});});app.post('/addTask',(req,res)=>{const{taskName,taskContent}=req.body;const insertQuery='INSERT INTO tasks (task_name, task_state, task_content, task_id_user) VALUES (?, ?, ?, ?)';const values=[taskName,false,taskContent,1];db.query(insertQuery,values,(err,result)=>{if(err){console.error('MySQL query error:',err);res.status(500).send('Internal Server Error');}else{console.log('New task added:',result);res.redirect('/todo');}});});app.post('/editTask',(req,res)=>{const{taskId,editTaskName,editTaskContent}=req.body;const updateQuery='UPDATE tasks SET task_name = ?, task_content = ? WHERE id_task = ?';const updateValues=[editTaskName,editTaskContent,taskId];db.query(updateQuery,updateValues,(err,result)=>{if(err){console.error('MySQL query error:',err);res.status(500).send('Internal Server Error');}else{console.log('Task updated:',result);res.redirect('/todo');}});});app.post('/updateTaskState',(req,res)=>{const{taskId,newState}=req.body;const updateStateQuery='UPDATE tasks SET task_state = ? WHERE id_task = ?';const updateStateValues=[newState,taskId];db.query(updateStateQuery,updateStateValues,(err,result)=>{if(err){console.error('MySQL query error:',err);res.status(500).send('Internal Server Error');}else{console.log('Task state updated:',result);res.send('Task state updated successfully');}});});app.post('/deleteTask',(req,res)=>{const{taskId}=req.body;const deleteQuery='DELETE FROM tasks WHERE id_task = ?';const deleteValues=[taskId];db.query(deleteQuery,deleteValues,(err,result)=>{if(err){console.error('MySQL query error:',err);res.status(500).send('Internal Server Error');}else{console.log('Task deleted:',result);res.send('Task deleted successfully');}});});app.get('/projets',(req,res)=>{res.sendFile(path.join(__dirname,'public','/html/projets.html'));});app.get('/experience',(req,res)=>{res.sendFile(path.join(__dirname,'public','/html/experience.html'));});app.listen(PORT,()=>{console.log(`Server is running at http://localhost:${PORT}`);});
